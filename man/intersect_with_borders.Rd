% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{intersect_with_borders}
\alias{intersect_with_borders}
\title{Intersect Geometries with Administrative Borders}
\usage{
intersect_with_borders(input, level, countriesSP, EZG, aoi)
}
\arguments{
\item{input}{An sf object containing the input geometries to be intersected}

\item{level}{Numeric value specifying the administrative level for intersection
(e.g., 1 for states/provinces, 2 for counties/districts)}

\item{countriesSP}{SpatialPolygonsDataFrame object containing world map boundaries}

\item{EZG}{SpatialPolygonsDataFrame object containing German river catchments}

\item{aoi}{SpatialPolygonsDataFrame object containing the areas of interest}
}
\value{
An sf object containing the intersected geometries
}
\description{
Performs spatial intersection between input geometries and administrative borders
at a specified level. The function first creates a central point from the input
geometry's bounding box, identifies the corresponding country, and then intersects
the input with administrative boundaries of that country.
}
\details{
The function follows these steps:
\enumerate{
\item Creates a bounding box and center point from input geometry
\item Identifies the country using the center point
\item Retrieves administrative boundaries for the identified country
\item Performs spatial intersection
}

Special handling is implemented for Germany (DE) where it uses a predefined
watershed boundary layer (EZG).
}
\examples{
\dontrun{
# Create sample input geometry
input_geom <- st_read("input.shp")

# Intersect with level 1 administrative boundaries
result <- intersect_with_borders(input_geom, level = 1)
}

}
